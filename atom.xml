<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MosesBlog</title>
  <subtitle>Meditation promising</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-02T09:26:42.065Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ww</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>win7环境下搭建hexo</title>
    <link href="http://yoursite.com/2015/07/03/win7%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhexo/"/>
    <id>http://yoursite.com/2015/07/03/win7环境下搭建hexo/</id>
    <published>2015-07-03T07:08:46.000Z</published>
    <updated>2017-08-02T09:26:42.065Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h1><h2 id="1-1-Github"><a href="#1-1-Github" class="headerlink" title="1.1 Github"></a>1.1 Github</h2><p>接触编程一段时间后，相信大家都会开始了解到版本控制，如SVN、HG。是的，Github是一个知名的 分布式版本控制系统 以及 开源代码库。<br>在本次博客搭建中，也是需要大家能够具备一定的Git版本控制知识的。大家放心，后文会对必须用到的命令进行讲解，但如果你想要对它有更详细的认知，可以在空余的时候参考以<br>详细介绍: Git Book<br><a id="more"></a></p>
<h2 id="1-2-Github-Pages"><a href="#1-2-Github-Pages" class="headerlink" title="1.2 Github Pages"></a>1.2 Github Pages</h2><p>在Github里面，每一个项目都拥有它的一个主页，列出项目的源文件，但是对于新手来说，看到那么多的源代码，只会让人感到头晕脑胀，无从下手，他更希望的是，该项目有一个简明易懂的页面，告诉他每一步要怎么去做。<br>因此，Github就设计了Github Pages这个功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，Github Pages可以被认为是用户编写的、托管在github上的静态网页。<br>有的用户说，我前端渣渣，这个功能对我来说，并没有什么卵用，还不如用个记事本写好上传给大家看。Github似乎早就考虑到了这一点，设计了几个漂亮的模版供用户直接选择使用。<br>而我们也正是利用了Github Pages这一个特性，去搭建属于我们的个人博客。</p>
<h2 id="1-3-关于-Hexo"><a href="#1-3-关于-Hexo" class="headerlink" title="1.3 关于 Hexo"></a>1.3 关于 Hexo</h2><p>按照官网的说法，Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。通过提交本地生成的静态页面到自己github，通过该平台实现部署自己博客系统。<br>链接：<a href="https://hexo.io/" target="_blank" rel="external">点击进入</a></p>
<h1 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2 环境准备"></a>2 环境准备</h1><h2 id="2-1-Git"><a href="#2-1-Git" class="headerlink" title="2.1 Git"></a>2.1 Git</h2><p>接触编程一段时间后，相信大家都会开始了解到版本控制，如SVN、HG。是的，Github是一个知名的 分布式版本控制系统 以及 开源代码库。<br>在本次博客搭建中，需要注册github账户<br>链接: <a href="https://github.com/" target="_blank" rel="external">点击进入</a></p>
<p>下载地址: <a href="https://git-scm.com/downloads" target="_blank" rel="external">点击下载</a></p>
<p>如图，选择win7平台点击下载完成后进行安装(具体的安装步骤可自行百度)，安装完成后，打开终端执行以下命令进行验证执行</p>
<p><code>git --version</code></p>
<p>如果终端输出了刚才安装gie的版本，说明安装成功。</p>
<h2 id="2-2-NodeJs"><a href="#2-2-NodeJs" class="headerlink" title="2.2 NodeJs"></a>2.2 NodeJs</h2><p>下载地址: <a href="http://nodejs.cn/download/" target="_blank" rel="external">点击下载</a></p>
<p>选择win7平台点击下载相应平台的NodeJS进行安装，个人比较喜欢通过.msi的方式进行安装(详细安装步骤可自行百度)。<br>安装完成后，控制台执行</p>
<p><code>npm -v</code></p>
<p>如果控制台输出刚才安装的版本，说明安装成功。<br>安装成功后，设置npm为国内镜像，这样网络会比较稳定。</p>
<p>控制台执行以下命令</p>
<p><code>npm config set registry https://registry.npm.taobao.org --global</code><br><code>npm config set disturl https://npm.taobao.org/dist --global</code></p>
</blockquote>
<h1 id="3-hexo安装"><a href="#3-hexo安装" class="headerlink" title="3 hexo安装"></a>3 hexo安装</h1><blockquote>
<h2 id="3-1-hexo安装"><a href="#3-1-hexo安装" class="headerlink" title="3.1 hexo安装"></a>3.1 hexo安装</h2><p>Node.js和Git安装完成后，就可以正式安装Hexo了。在电脑任意位置右键，点击Git Base Here使用下面的命令安装Hexo:</p>
<p><code>npm install -g hexo-cli</code></p>
<p>注意：运行命令过程中，只要没有报错误（ERROR）就没有问题，警告（WARN）可以忽略<br>在电脑上新建目录，用于存放博客的相关数据，比如e:\HexoBlog，然后进入该文件夹右键，点击Git Base Here，执行以下两个命令：</p>
<p><code>hexo init</code> # 初始化目录，会自动生成一些基础文件</p>
<p><code>npm install</code> # 安装hexo必要的组件</p>
<p><code>hexo init</code>命令执行成功后，看到类似一下提示就是成功了<br><img src="/images/hexoinstall.png" alt=""></p>
<p>npm install命令执行，在hexo3.0之前还是有一些输出的，但是3.0之后，我执行的时候并没有输出，只输出了一些警告，但是事实证明是没有问题的。<br><img src="/images/npminstall.png" alt=""></p>
<p>执行完以上命令以后，可以看到HexoBlog文件夹中，创建了以下目录：</p>
<pre><code>├── scaffolds/
├── scripts/
├── source/
| ├── _drafts
| └── _posts
├── themes/
├── _config.yml
├── package.json
</code></pre><p>依次简单介绍一下各个目录：</p>
<p> ● scaffolds/：模版文件。当你创建一篇新的文章时，hexo会依据模版文件进行创建。<br> ● scripts/：放脚本的文件夹。</p>
<p> ● source/：这个文件夹就是放文章的地方了，除了文章还有一些主要的资源，比如文章里的图片，文件等等东西。这个文件夹最好定期做一个备份，丢了它，整个站点就废了。</p>
<p> ● themes/：主题文件夹。网上下载或者克隆的主题都存放在这。</p>
<p> ● package.json：应用数据。从它可以看出hexo版本信息，以及它所默认或者说依赖的一些组件。</p>
<p> ● _config.yml：站点配置文件。非常重要的配置文件，很多全局的配置都在里面。<br>到这里为止，我们就可以预览一下系统了。执行下面两个命令:</p>
<h2 id="3-2-hexo-demo启动"><a href="#3-2-hexo-demo启动" class="headerlink" title="3.2 hexo demo启动"></a>3.2 hexo demo启动</h2><p>当我们的博客个性化配置完成后，我们一起来看下如何创建我们的第一篇博文－Hello Hexo.<br>进入到博客的根目录，执行以下命令生成新的博文</p>
<p><code>hexo new hello-hexo</code>  # 格式是： hexo new ｛文章名｝</p>
<p>命令执行成功后，你就会发现在 source/_posts 目录下多了一个文件 hello-hexo.md 。<br>前面我们已经说到，我们的博文使用markdown语法进行编写的，后面的博文我会详细的进行markdown语法的讲解。<br>接下来，打开这个文件，我们可以看到以下内容：<br>1title: hello-hexo2date: 2015-09-03 00:08:303tags:4 —<br>他们的含义是：</p>
<p>● title : 文章的标题</p>
<p>● date : 该文章的创建时间</p>
<p> ● tags : 该文章的标记tag<br>下面我们可以更改成<br>title: 你好，Hexodate: 2015-09-03 00:08:30tags:   - hexo—这是我的第一篇博客，你好，Hexo。</p>
<p>到这里，我们的第一篇博客编写完毕。</p>
<p><code>hexo generate</code> #生成静态文件，可以简写为：hexo g</p>
<p><code>hexo server</code> #启动本地服务进行测试，简写为：hexo s</p>
<p>执行hexo server命令后如下图所示<br><img src="/images/start.png" alt=""></p>
<h2 id="3-3-浏览页面"><a href="#3-3-浏览页面" class="headerlink" title="3.3 浏览页面"></a>3.3 浏览页面</h2><p>系统默认会运行在 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a><br>如果4000被占用的话，访问这个地址是没有反应的，我电脑的4000端口就是被福昕阅读器给占用了，所以我需要指定一个其他端口。</p>
<p><code>hexo server -p 4005</code></p>
<p>这个命令可以使系统运行在4005端口上，我们使用 <a href="http://localhost:4005" target="_blank" rel="external">http://localhost:4005</a> 访问系统就可以了。<br>更彻底方便的一种方法就是去修改hexo默认的端口号：<br>Hexo 3.0之前的版本，端口号可能存放在站点配置文件_config.yml中，不过在3.0之后，端口号就在博客目录下node_modules\hexo-server\index.js里面了。</p>
<pre><code>hexo.config.server = assign({
 port: 4005,
 log: false,
 ip: &apos;0.0.0.0&apos;,
 compress: false,
 header: true
}, hexo.config.server);
</code></pre><p>下面就是hexo搭建出来的博客的默认界面：<br><img src="/images/hexo.png" alt=""></p>
<h1 id="4发布"><a href="#4发布" class="headerlink" title="4发布"></a>4发布</h1><h2 id="4-1-安装必备插件"><a href="#4-1-安装必备插件" class="headerlink" title="4.1 安装必备插件"></a>4.1 安装必备插件</h2><p>执行以下命令进行Hexo框架的基本安装<br>npm install hexo-cli -g<br>安装便于自动部署到Github上的插件</p>
<p><code>npm install hexo-deployer-git --save</code></p>
<p>安装atom生成插件，便于感兴趣的小伙伴们订阅</p>
<p><code>npm install hexo-generator-feed --save</code></p>
<p>安装博客首页生成插件</p>
<p><code>npm install hexo-generator-index --save</code></p>
<p>安装归档生成插件</p>
<p><code>npm install hexo-generator-archive --save</code></p>
<p>安装tag生成插件</p>
<p><code>npm install hexo-generator-tag --save</code></p>
<p>安装category生成插件</p>
<p><code>npm install hexo-generator-category --save</code></p>
<p>安装Sitemap文件生成插件</p>
<p><code>npm install hexo-generator-sitemap --save</code></p>
<p>安装百度Sitemap文件生成插件，因为普通的Sitemap格式不符合百度的要求</p>
<p><code>npm install hexo-generator-baidu-sitemap --save</code></p>
<h2 id="4-3-GitHub-配置"><a href="#4-3-GitHub-配置" class="headerlink" title="4.3 GitHub 配置"></a>4.3 GitHub 配置</h2><p>前面注册GitHub后，新创建一个Repository，我们需要创建一个Repository进行我们的博客托管，这个Repository的命名必须遵循以下规范username(必须和你的github用户名一致).github.io</p>
<p>添加SSH Key<br>生成 SSH Key，执行以下命令:</p>
<p><code>ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code></p>
<p>执行该命令后，会在系统用户目录下面生成一个.ssh文件夹，打开该文件夹中的id_rsa.pub文件，将该文件中的全部内容复制到后续步骤中，添加ssh key的选项中.SSH Key添加为了让我们的电脑能直接免密码通过SSH访问GitHub，需要将我们的SSH Key添加到GitHub上。</p>
<p>添加 ssh Key<br>进入新创建的Repository中,点击setting进入add ssh key选项，将上一步骤复制的ssh key添加到该Repository，点击保存即可。<br>添加完成后，将新创建的git Repository clone到本地，首次连接是会出现如下图所示画面，直接数据yes即可<br><img src="/images/clone" alt=""><br>在完成以上操作后，可以将之前创建的demo 进行deploy<br>首先删除自己本地博客目录下的.deploy_git文件夹。<br>执行一下命令对git进行配置</p>
<p><code>git config --global user.name &quot;yourname&quot;</code><br><code>git config --global user.email &quot;youremail&quot;</code></p>
<p>执行命令：</p>
<p><code>hexo clean</code> #清理之前的生成的静态资源<br><code>hexo d -g</code>  #再次生成静态资源，并deploy<br>deploy完成如下图所示,说明deploy成功。<br><img src="/images/deploy.jpg" alt=""><br>以上步骤成功之后，浏览器直接访问username.github.io 即可访问。</p>
<h1 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h1><p>资源配置文件_config.yml，改配置文件应该严格遵守，”：”后面必须加空格才能跟具体添加的内容，否则在生成静态文件或者deploy是会报错。</p>
<p>source_posts 生成的文件不能随意手动删除，否则会报错。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1 介绍&quot;&gt;&lt;/a&gt;1 介绍&lt;/h1&gt;&lt;h2 id=&quot;1-1-Github&quot;&gt;&lt;a href=&quot;#1-1-Github&quot; class=&quot;headerlink&quot; title=&quot;1.1 Github&quot;&gt;&lt;/a&gt;1.1 Github&lt;/h2&gt;&lt;p&gt;接触编程一段时间后，相信大家都会开始了解到版本控制，如SVN、HG。是的，Github是一个知名的 分布式版本控制系统 以及 开源代码库。&lt;br&gt;在本次博客搭建中，也是需要大家能够具备一定的Git版本控制知识的。大家放心，后文会对必须用到的命令进行讲解，但如果你想要对它有更详细的认知，可以在空余的时候参考以&lt;br&gt;详细介绍: Git Book&lt;br&gt;
    
    </summary>
    
    
      <category term="Welcom to Hexo" scheme="http://yoursite.com/tags/Welcom-to-Hexo/"/>
    
  </entry>
  
</feed>
